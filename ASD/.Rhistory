colnames(rpoe.cog.s)[c(13:16)])))
t3
summary(glm(dti_fa__Commissure_CorpusCallosum ~ pred_ASD*pred_CP,
data = tmp %>% select(dti_fa__Commissure_CorpusCallosum,
pred_ASD, pred_CP,
colnames(rpoe.cog.s)[c(13:16)])))
summary(glm(pred_ASD ~ dti_fa__Commissure_CorpusCallosum*pred_CP,
data = tmp %>% select(dti_fa__Commissure_CorpusCallosum,
pred_ASD, pred_CP,
colnames(rpoe.cog.s)[c(13:16)])))
# language
rpoe.psvc <- read_rds("../../RPOE/language/data/derivatives/summarized-metrics-psvc.rds")
rpoe.psvc
inner_join(t3, rpoe.psvc)
colnames(rpoe.psvc)
inner_join(t3, rpoe.psvc) %>%
pivot_longer(cols = colnames(rpoe.psvc)[-1]) %>%
pivot_longer(cols = c(pred_ASD, pred_CP), names_to = "pred", values_to = "pred_val") +
ggplot(aes(x=pred_val, y = value)) +
geom_point(shape = 1) +
geom_smooth(method = "lm", color = six.colors[3]) +
ggpubr::stat_cor(aes(color = ifelse(..r.. > 0, "red", "blue"),
label = ifelse(..p.value.. < 0.1, label, "")),
show.legend = F, na.rm = T) +
scale_color_manual(values = redblu.col[c(2,1)]) +
ggh4x::facet_grid2(rows = vars(name),
cols = vars(pred),
scales = "free") +
labs(x = "predicted value", y = "language metric value") +
bw.theme +
theme(strip.text.y.right = element_text(angle = 0))
inner_join(t3, rpoe.psvc) %>%
pivot_longer(cols = colnames(rpoe.psvc)[-1]) %>%
pivot_longer(cols = c(pred_ASD, pred_CP), names_to = "pred", values_to = "pred_val") %>%
ggplot(aes(x=pred_val, y = value)) +
geom_point(shape = 1) +
geom_smooth(method = "lm", color = six.colors[3]) +
ggpubr::stat_cor(aes(color = ifelse(..r.. > 0, "red", "blue"),
label = ifelse(..p.value.. < 0.1, label, "")),
show.legend = F, na.rm = T) +
scale_color_manual(values = redblu.col[c(2,1)]) +
ggh4x::facet_grid2(rows = vars(name),
cols = vars(pred),
scales = "free") +
labs(x = "predicted value", y = "language metric value") +
bw.theme +
theme(strip.text.y.right = element_text(angle = 0))
inner_join(t3, rpoe.psvc) %>%
pivot_longer(cols = colnames(rpoe.psvc)[-1]) %>%
pivot_longer(cols = c(pred_ASD, pred_CP), names_to = "pred", values_to = "pred_val") %>%
ggplot(aes(x=pred_val, y = value)) +
geom_point(shape = 1) +
geom_smooth(method = "lm", color = six.colors[3]) +
ggpubr::stat_cor(aes(color = ifelse(..r.. > 0, "red", "blue"),
label = ifelse(..p.value.. < 0.1, label, "")),
show.legend = F, na.rm = T, size = 2) +
scale_color_manual(values = redblu.col[c(2,1)]) +
ggh4x::facet_grid2(rows = vars(name),
cols = vars(pred),
scales = "free") +
labs(x = "predicted value", y = "language metric value") +
bw.theme +
theme(strip.text.y.right = element_text(angle = 0))
inner_join(t3, rpoe.psvc) %>%
pivot_longer(cols = colnames(rpoe.psvc)[-1]) %>%
pivot_longer(cols = c(pred_ASD, pred_CP), names_to = "pred", values_to = "pred_val") %>%
ggplot(aes(x=pred_val, y = value)) +
geom_point(shape = 1) +
geom_smooth(method = "lm", color = six.colors[3]) +
ggpubr::stat_cor(aes(color = ifelse(..r.. > 0, "red", "blue"),
label = ifelse(..p.value.. < 0.1, label, "")),
show.legend = F, na.rm = T, size = 3) +
scale_color_manual(values = redblu.col[c(2,1)]) +
ggh4x::facet_grid2(rows = vars(name),
cols = vars(pred),
scales = "free") +
labs(x = "predicted value", y = "language metric value") +
bw.theme +
theme(strip.text.y.right = element_text(angle = 0))
ggsave("figs/predicted-ASD-CP_RPOE_language.png", bg = "white",
width = 8, height = 14, units = "in", dpi = 360)
ggsave("figs/predicted-ASD-CP_RPOE_language.png", bg = "white",
width = 6, height = 14, units = "in", dpi = 360)
colnames(rpoe.f.mri.falff2)
# falff
inner_join(t3, rpoe.f.mri.falff2) %>%
pivot_longer(cols = colnames(rpoe.f.mri.falff2)[-1]) %>%
pivot_longer(cols = c(pred_ASD, pred_CP), names_to = "pred", values_to = "pred_val") %>%
ggplot(aes(x=pred_val, y = value)) +
geom_point(shape = 1) +
geom_smooth(method = "lm", color = six.colors[3]) +
ggpubr::stat_cor(aes(color = ifelse(..r.. > 0, "red", "blue"),
label = ifelse(..p.value.. < 0.1, label, "")),
show.legend = F, na.rm = T, size = 3) +
scale_color_manual(values = redblu.col[c(2,1)]) +
ggh4x::facet_grid2(rows = vars(name),
cols = vars(pred),
scales = "free") +
labs(x = "predicted value", y = "language metric value") +
bw.theme +
theme(strip.text.y.right = element_text(angle = 0))
# falff
inner_join(t3, rpoe.f.mri.falff2) %>%
pivot_longer(cols = colnames(rpoe.f.mri.falff2)[-1]) %>%
pivot_longer(cols = c(pred_ASD, pred_CP), names_to = "pred", values_to = "pred_val") %>%
ggplot(aes(x=pred_val, y = value)) +
geom_point(shape = 1) +
geom_smooth(method = "lm", color = six.colors[3]) +
ggpubr::stat_cor(aes(color = ifelse(..r.. > 0, "red", "blue"),
label = ifelse(..p.value.. < 0.1, label, "")),
show.legend = F, na.rm = T, size = 3) +
scale_color_manual(values = redblu.col[c(2,1)]) +
ggh4x::facet_grid2(rows = vars(name),
cols = vars(pred),
scales = "free") +
labs(x = "predicted value", y = "fALFF value") +
bw.theme +
theme(strip.text.y.right = element_text(angle = 0))
ggsave("figs/predicted-ASD-CP_RPOE_fALFF.png", bg = "white",
width = 6, height = 14, units = "in", dpi = 360)
ggsave("figs/predicted-ASD-CP_RPOE_fALFF.png", bg = "white",
width = 6, height = 10, units = "in", dpi = 360)
ggsave("figs/predicted-ASD-CP_RPOE_fALFF.png", bg = "white",
width = 6, height = 9, units = "in", dpi = 360)
ggsave("figs/predicted-ASD-CP_RPOE_fALFF.png", bg = "white",
width = 7, height = 9, units = "in", dpi = 360)
ggsave("figs/predicted-ASD-CP_RPOE_fALFF.png", bg = "white",
width = 5, height = 9, units = "in", dpi = 360)
# reho
inner_join(t3, rpoe.f.mri.reho2) %>%
pivot_longer(cols = colnames(rpoe.f.mri.reho2)[-1]) %>%
pivot_longer(cols = c(pred_ASD, pred_CP), names_to = "pred", values_to = "pred_val") %>%
ggplot(aes(x=pred_val, y = value)) +
geom_point(shape = 1) +
geom_smooth(method = "lm", color = six.colors[3]) +
ggpubr::stat_cor(aes(color = ifelse(..r.. > 0, "red", "blue"),
label = ifelse(..p.value.. < 0.1, label, "")),
show.legend = F, na.rm = T, size = 3) +
scale_color_manual(values = redblu.col[c(2,1)]) +
ggh4x::facet_grid2(rows = vars(name),
cols = vars(pred),
scales = "free") +
labs(x = "predicted value", y = "ReHo value") +
bw.theme +
theme(strip.text.y.right = element_text(angle = 0))
ggsave("figs/predicted-ASD-CP_RPOE_ReHo.png", bg = "white",
width = 5, height = 9, units = "in", dpi = 360)
################################################################################
################################################################################
################################################################################
# train on cognition to predict ASD PGS
t8 <- abcd.all %>%
select(ASD, colnames(abcd.cog2)[-c(1,2)]) %>% ungroup()
glm.model.asd2 <- glm(ASD ~ ., data = t8)
# apply on RPOE
predictions.rpoe.glm.asd2 <- predict(glm.model.asd2,
rpoe.2 %>% select(colnames(t8)[-1]))
p2 <- rpoe.2 %>%
mutate(pred = predictions.rpoe.glm.cp) %>%
ggplot(aes(x=FSIQ, y = pred)) +
geom_violin(show.legend = F) +
geom_boxplot(width = 0.2, fill = "white") +
ggpubr::stat_compare_means() +
scale_fill_manual(values = boxplot.colors) +
labs(y = "predcited ASD using NIH-TB") +
bw.theme
p2 <- rpoe.2 %>%
mutate(pred = predictions.rpoe.glm.cp) %>%
ggplot(aes(x=FSIQ, y = pred)) +
geom_point(shape = 1) +
geom_smooth(method = "lm", color = six.colors[3]) +
ggpubr::stat_cor() +
labs(y = "predicted CP") +
bw.theme
p8 <- rpoe.2 %>%
mutate(pred = predictions.rpoe.glm.asd2) %>%
ggplot(aes(x=FSIQ, y = pred)) +
geom_violin(show.legend = F) +
geom_boxplot(width = 0.2, fill = "white") +
ggpubr::stat_compare_means() +
scale_fill_manual(values = boxplot.colors) +
labs(y = "predcited ASD using NIH-TB") +
bw.theme
p8
p8 <- rpoe.2 %>%
mutate(pred = predictions.rpoe.glm.asd2) %>%
ggplot(aes(x=ASD, y = pred)) +
geom_violin(show.legend = F) +
geom_boxplot(width = 0.2, fill = "white") +
ggpubr::stat_compare_means() +
scale_fill_manual(values = boxplot.colors) +
labs(y = "predcited ASD using NIH-TB") +
bw.theme
p8 <- rpoe.2 %>%
mutate(pred = predictions.rpoe.glm.asd2) %>%
ggplot(aes(x=ASD_dx, y = pred)) +
geom_violin(show.legend = F) +
geom_boxplot(width = 0.2, fill = "white") +
ggpubr::stat_compare_means() +
scale_fill_manual(values = boxplot.colors) +
labs(y = "predcited ASD using NIH-TB") +
bw.theme
p8 <- rpoe.2 %>%
mutate(pred = predictions.rpoe.glm.asd2) %>%
ggplot(aes(x=ASD_dx, y = pred, fill = ASD_dx)) +
geom_violin(show.legend = F) +
geom_boxplot(width = 0.2, fill = "white") +
ggpubr::stat_compare_means() +
scale_fill_manual(values = boxplot.colors) +
labs(y = "predcited ASD using NIH-TB") +
bw.theme
p8
t8
glm.model.asd2 <- glm(ASD ~ ., data = t8 %>% mutate(ASD = as.numeric(ASD)))
# apply on RPOE
predictions.rpoe.glm.asd2 <- predict(glm.model.asd2,
rpoe.2 %>% select(colnames(t8)[-1]))
p8 <- rpoe.2 %>%
mutate(pred = predictions.rpoe.glm.asd2) %>%
ggplot(aes(x=ASD_dx, y = pred, fill = ASD_dx)) +
geom_violin(show.legend = F) +
geom_boxplot(width = 0.2, fill = "white") +
ggpubr::stat_compare_means() +
scale_fill_manual(values = boxplot.colors) +
labs(y = "predcited ASD using NIH-TB") +
bw.theme
p8
rpoe.2 %>%
mutate(pred = predictions.rpoe.glm) %>%
ggplot(aes(x=ADHD_dx, y = pred, fill = ADHD_dx)) +
geom_violin(show.legend = F) +
geom_boxplot(width = 0.2, fill = "white") +
ggpubr::stat_compare_means() +
scale_fill_manual(values = boxplot.colors) +
labs(y = "predcited ASD") +
bw.theme
inner_join(t3, rpoe.psvc) %>%
pivot_longer(cols = colnames(rpoe.psvc)[-1]) %>%
pivot_longer(cols = c(pred_ASD, pred_CP), names_to = "pred", values_to = "pred_val") %>%
ggplot(aes(x=pred_val, y = value)) +
geom_point(shape = 1) +
geom_smooth(method = "lm", color = six.colors[3]) +
ggpubr::stat_cor(aes(color = ifelse(..r.. > 0, "red", "blue"),
label = ifelse(..p.value.. < 0.1, label, "")),
show.legend = F, na.rm = T, size = 3) +
scale_color_manual(values = redblu.col[c(2,1)]) +
ggh4x::facet_grid2(rows = vars(name),
cols = vars(pred),
scales = "free") +
labs(x = "predicted value", y = "language metric value") +
bw.theme +
theme(strip.text.y.right = element_text(angle = 0))
# falff
inner_join(t3, rpoe.f.mri.falff2) %>%
pivot_longer(cols = colnames(rpoe.f.mri.falff2)[-1]) %>%
pivot_longer(cols = c(pred_ASD, pred_CP), names_to = "pred", values_to = "pred_val") %>%
ggplot(aes(x=pred_val, y = value)) +
geom_point(shape = 1) +
geom_smooth(method = "lm", color = six.colors[3]) +
ggpubr::stat_cor(aes(color = ifelse(..r.. > 0, "red", "blue"),
label = ifelse(..p.value.. < 0.1, label, "")),
show.legend = F, na.rm = T, size = 3) +
scale_color_manual(values = redblu.col[c(2,1)]) +
ggh4x::facet_grid2(rows = vars(name),
cols = vars(pred),
scales = "free") +
labs(x = "predicted value", y = "fALFF value") +
bw.theme +
theme(strip.text.y.right = element_text(angle = 0))
# reho
inner_join(t3, rpoe.f.mri.reho2) %>%
pivot_longer(cols = colnames(rpoe.f.mri.reho2)[-1]) %>%
pivot_longer(cols = c(pred_ASD, pred_CP), names_to = "pred", values_to = "pred_val") %>%
ggplot(aes(x=pred_val, y = value)) +
geom_point(shape = 1) +
geom_smooth(method = "lm", color = six.colors[3]) +
ggpubr::stat_cor(aes(color = ifelse(..r.. > 0, "red", "blue"),
label = ifelse(..p.value.. < 0.1, label, "")),
show.legend = F, na.rm = T, size = 3) +
scale_color_manual(values = redblu.col[c(2,1)]) +
ggh4x::facet_grid2(rows = vars(name),
cols = vars(pred),
scales = "free") +
labs(x = "predicted value", y = "ReHo value") +
bw.theme +
theme(strip.text.y.right = element_text(angle = 0))
t4 %>%
pivot_longer(cols = contains("Corpus")) %>%
mutate(name = sub("_Commissure_", "", name),
name = sub("dti_fa", "FA_", name),
name = sub("md_", "MD_", name)) %>%
ggplot(aes(x = cat2, y = value, fill = cat2)) +
geom_violin(show.legend = F) + geom_boxplot(fill = "white", width = 0.2) +
ggpubr::stat_compare_means(vjust = 0.35, size = 3.5,
comparisons = combn(cat2, 2, simplify = F)) +
scale_fill_manual(values = six.colors) +
facet_wrap(~name, scales = "free_y", nrow = 2) +
labs(x= "", y = "DTI value (residualized for age and sex)",
caption = paste0("n(", cat2[1], "): ", sum(t4$cat2 == cat2[1]), "\n",
"n(", cat2[2], "): ", sum(t4$cat2 == cat2[2]), "\n",
"n(", cat2[3], "): ", sum(t4$cat2 == cat2[3]), "\n",
"n(", cat2[4], "): ", sum(t4$cat2 == cat2[4]), "\n")) +
bw.theme +
theme(axis.text.x.bottom =  element_text(angle = 45, hjust = 1))
t4 <- t3 %>% select(-FSIQ) %>%
inner_join(rpoe.d.mri.fa3) %>%
inner_join(rpoe.d.mri.md3) %>%
inner_join(rpoe.cog.s) %>%
select(-FSIQ) %>% rename(FSIQ = pred_CP) %>%
mutate(cat2 = case_when(c(pred_ASD >= median(pred_ASD) & FSIQ >= median(FSIQ)) ~ "High ASD, High FSIQ",
c(pred_ASD >= median(pred_ASD) & FSIQ < median(FSIQ)) ~ "High ASD, Low FSIQ",
c(pred_ASD < median(pred_ASD) & FSIQ >= median(FSIQ)) ~ "Low ASD, High FSIQ",
c(pred_ASD < median(pred_ASD) & FSIQ < median(FSIQ)) ~ "Low ASD, Low FSIQ"))
t4 %>%
pivot_longer(cols = contains("Corpus")) %>%
mutate(name = sub("_Commissure_", "", name),
name = sub("dti_fa", "FA_", name),
name = sub("md_", "MD_", name)) %>%
ggplot(aes(x = cat2, y = value, fill = cat2)) +
geom_violin(show.legend = F) + geom_boxplot(fill = "white", width = 0.2) +
ggpubr::stat_compare_means(vjust = 0.35, size = 3.5,
comparisons = combn(cat2, 2, simplify = F)) +
scale_fill_manual(values = six.colors) +
facet_wrap(~name, scales = "free_y", nrow = 2) +
labs(x= "", y = "DTI value (residualized for age and sex)",
caption = paste0("n(", cat2[1], "): ", sum(t4$cat2 == cat2[1]), "\n",
"n(", cat2[2], "): ", sum(t4$cat2 == cat2[2]), "\n",
"n(", cat2[3], "): ", sum(t4$cat2 == cat2[3]), "\n",
"n(", cat2[4], "): ", sum(t4$cat2 == cat2[4]), "\n")) +
bw.theme +
theme(axis.text.x.bottom =  element_text(angle = 45, hjust = 1))
t4 <- t3 %>% select(-FSIQ) %>%
inner_join(rpoe.d.mri.fa3) %>%
inner_join(rpoe.d.mri.md3) %>%
inner_join(rpoe.cog.s) %>%
mutate(cat2 = case_when(c(pred_ASD >= median(pred_ASD) & FSIQ >= median(FSIQ)) ~ "High ASD, High FSIQ",
c(pred_ASD >= median(pred_ASD) & FSIQ < median(FSIQ)) ~ "High ASD, Low FSIQ",
c(pred_ASD < median(pred_ASD) & FSIQ >= median(FSIQ)) ~ "Low ASD, High FSIQ",
c(pred_ASD < median(pred_ASD) & FSIQ < median(FSIQ)) ~ "Low ASD, Low FSIQ"))
t4 %>%
pivot_longer(cols = contains("Corpus")) %>%
mutate(name = sub("_Commissure_", "", name),
name = sub("dti_fa", "FA_", name),
name = sub("md_", "MD_", name)) %>%
ggplot(aes(x = cat2, y = value, fill = cat2)) +
geom_violin(show.legend = F) + geom_boxplot(fill = "white", width = 0.2) +
ggpubr::stat_compare_means(vjust = 0.35, size = 3.5,
comparisons = combn(cat2, 2, simplify = F)) +
scale_fill_manual(values = six.colors) +
facet_wrap(~name, scales = "free_y", nrow = 2) +
labs(x= "", y = "DTI value (residualized for age and sex)",
caption = paste0("n(", cat2[1], "): ", sum(t4$cat2 == cat2[1]), "\n",
"n(", cat2[2], "): ", sum(t4$cat2 == cat2[2]), "\n",
"n(", cat2[3], "): ", sum(t4$cat2 == cat2[3]), "\n",
"n(", cat2[4], "): ", sum(t4$cat2 == cat2[4]), "\n")) +
bw.theme +
theme(axis.text.x.bottom =  element_text(angle = 45, hjust = 1))
plot(t4$pred_ASD, t4$pred_CP)
theme_baseR <- function() {
theme(
panel.background = element_rect(fill = "white", color = "black"),
panel.border = element_rect(fill = NA, color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "black"),
axis.ticks = element_line(color = "black"),
axis.title = element_text(color = "black", size = 12),
axis.text = element_text(color = "black", size = 10),
plot.background = element_rect(fill = "white", color = NA),
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
legend.background = element_rect(fill = "white", color = "black"),
legend.key = element_rect(fill = "white", color = NA),
strip.background = element_rect(fill = "grey80", color = "black"),
strip.text = element_text(size = 12)
)
}
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point()
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() +
theme_baseR()
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() +
theme_bw()
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() +
bw.theme
plot(t4$pred_ASD, t4$pred_CP)
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() +
theme_linedraw() +
theme(
# Background and panel borders similar to base R
panel.background = element_rect(fill = "white", color = NA),
panel.border = element_rect(color = "black", fill = NA, size = 1),
# Remove grid lines to match base R
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# Axis lines to match base R
axis.line = element_line(color = "black", size = 0.5),
# Ticks similar to base R style
axis.ticks = element_line(color = "black", size = 0.5),
axis.ticks.length = unit(-0.2, "cm"),
# Axis text with margins to adjust distance from ticks
axis.text.x = element_text(size = base_size * 0.8, family = base_family, color = "black",
margin = margin(t = 5, b = 2)),
axis.text.y = element_text(size = base_size * 0.8, family = base_family, color = "black",
margin = margin(r = 5, l = 2)),
# Axis titles with margins to adjust distance from axis text
axis.title.x = element_text(size = base_size, family = base_family, color = "black",
margin = margin(t = 10)),
axis.title.y = element_text(size = base_size, family = base_family, color = "black",
margin = margin(r = 10)),
# Plot title style similar to base R
plot.title = element_text(size = base_size * 1.2, family = base_family, face = "bold", hjust = 0.5),
# Plot background
plot.background = element_rect(fill = "white", color = NA),
# Legend styling similar to base R
legend.background = element_rect(fill = "white", color = NA),
legend.key = element_rect(fill = "white", color = NA),
legend.text = element_text(size = base_size * 0.8, family = base_family),
legend.title = element_text(size = base_size, family = base_family),
# Facet strips for faceted plots
strip.background = element_rect(fill = "grey80", color = "black"),
strip.text = element_text(size = base_size, family = base_family)
)
base_family = "serif"
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() +
theme_linedraw() +
theme(
# Background and panel borders similar to base R
panel.background = element_rect(fill = "white", color = NA),
panel.border = element_rect(color = "black", fill = NA, size = 1),
# Remove grid lines to match base R
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# Axis lines to match base R
axis.line = element_line(color = "black", size = 0.5),
# Ticks similar to base R style
axis.ticks = element_line(color = "black", size = 0.5),
axis.ticks.length = unit(-0.2, "cm"),
# Axis text with margins to adjust distance from ticks
axis.text.x = element_text(size = base_size * 0.8, family = base_family, color = "black",
margin = margin(t = 5, b = 2)),
axis.text.y = element_text(size = base_size * 0.8, family = base_family, color = "black",
margin = margin(r = 5, l = 2)),
# Axis titles with margins to adjust distance from axis text
axis.title.x = element_text(size = base_size, family = base_family, color = "black",
margin = margin(t = 10)),
axis.title.y = element_text(size = base_size, family = base_family, color = "black",
margin = margin(r = 10)),
# Plot title style similar to base R
plot.title = element_text(size = base_size * 1.2, family = base_family, face = "bold", hjust = 0.5),
# Plot background
plot.background = element_rect(fill = "white", color = NA),
# Legend styling similar to base R
legend.background = element_rect(fill = "white", color = NA),
legend.key = element_rect(fill = "white", color = NA),
legend.text = element_text(size = base_size * 0.8, family = base_family),
legend.title = element_text(size = base_size, family = base_family),
# Facet strips for faceted plots
strip.background = element_rect(fill = "grey80", color = "black"),
strip.text = element_text(size = base_size, family = base_family)
)
base_size = 12
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() +
theme_linedraw() +
theme(
# Background and panel borders similar to base R
panel.background = element_rect(fill = "white", color = NA),
panel.border = element_rect(color = "black", fill = NA, size = 1),
# Remove grid lines to match base R
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# Axis lines to match base R
axis.line = element_line(color = "black", size = 0.5),
# Ticks similar to base R style
axis.ticks = element_line(color = "black", size = 0.5),
axis.ticks.length = unit(-0.2, "cm"),
# Axis text with margins to adjust distance from ticks
axis.text.x = element_text(size = base_size * 0.8, family = base_family, color = "black",
margin = margin(t = 5, b = 2)),
axis.text.y = element_text(size = base_size * 0.8, family = base_family, color = "black",
margin = margin(r = 5, l = 2)),
# Axis titles with margins to adjust distance from axis text
axis.title.x = element_text(size = base_size, family = base_family, color = "black",
margin = margin(t = 10)),
axis.title.y = element_text(size = base_size, family = base_family, color = "black",
margin = margin(r = 10)),
# Plot title style similar to base R
plot.title = element_text(size = base_size * 1.2, family = base_family, face = "bold", hjust = 0.5),
# Plot background
plot.background = element_rect(fill = "white", color = NA),
# Legend styling similar to base R
legend.background = element_rect(fill = "white", color = NA),
legend.key = element_rect(fill = "white", color = NA),
legend.text = element_text(size = base_size * 0.8, family = base_family),
legend.title = element_text(size = base_size, family = base_family),
# Facet strips for faceted plots
strip.background = element_rect(fill = "grey80", color = "black"),
strip.text = element_text(size = base_size, family = base_family)
)
library(ggthemes)
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() +
theme_base()
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() +
bw.theme
plot(mtcars$wt, mtcars$mpg)
